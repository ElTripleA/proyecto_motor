/*
Nombres: Huberney Pamo Saenz, Moises Mora Martínez, Alejandro Arenas Jiménez.
Fecha: 7 de abríl del 2020.
Presentado a: Ing. Marco Ortíz.

El siguiente programa, realizará la conexión adecuada hacia el servidor del motor a través de la dirección IP: 186.155.208.171,
además el carnet correspondiente del usuario y también mediante el puerto de entrada 65000. Los procesará y guardará las variables mediante una string
para posteriormente realizar su uso en el proceso padre de la interfaz gráfica.

*/


//Librerias de la interfaz grafica
#include "ventana.h"
#include "ui_ventana.h"
//Definimos las librerías y constantes necesarias que conectaran con algunas estructuras externas
#include <stdio.h> // Libreria basica de c.
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdint.h>
#define ECHOMAX 255

/////////////////////////////////////////////////////////////////////////////////////////
Ventana::Ventana(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::Ventana)
{
    ui->setupUi(this);
}

Ventana::~Ventana()
{
    delete ui;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//               DEFINIMOS FUNCIONES           //
char *Conexion_internet(int argc, char *argv[], char *buffer); // Funcion que nos permite conectarnos al servidor con protocolo UDP y modificar una cadena de string en el menu.
void DieWithError (char *errorMessage); //Mediante esta función imprimimos los errores.
void Velocidad(char inf[ECHOMAX]); // Obtenemos los valores que necesitamos orden: Velocidad, Frecuencia,Voltaje, Temperatura, tiempo_init_op.
/*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/


//////////////////////////////////// PROGRAMA PRINCIPAL //////////////////////////////////
void Ventana::on_Actualizar_clicked()// Aqui establecemos el protocolo de informacion.
{
    //QString informacion_total=ui->InsertarCarn->text();


    //_____________________________________________DECLARAMOS VARIABLES___________________________________________________//
    char informacion[ECHOMAX]; // Se crea la cadena de caracteres que en el menu guardara la informacion del estado del motor.
    int argc=3;
    char arg[]={'186.155.208.171', '2137685','65000',};
    //________________________ESTABLECEMOS CONEXION CON EL SERVIDOR Y OBTENEMOS LA INFORMACION____________________________//
    Conexion_internet(argc,arg,informacion);// Devuelve una cadena de caracteres con la informacion completa.
    ui->Velocidad->setText(informacion);

}

//////////////////////////////////////////////////////// FUNCIONES ////////////////////////////////////////////////////////
char *Conexion_internet(int argc, char *argv[], char *buffer)//El apuntador servira para cambiar el valor de informacion en el principal.
{
        int sock;
        struct sockaddr_in echoServAddr;
        struct sockaddr_in fromAddr;
        unsigned short echoServPort;
        unsigned int fromSize;
        char *servIP;
        char *echoString;
        char echoBuffer[ECHOMAX+1];
        int echoStringLen;
        int respStringLen;

        if ((argc < 3) || (argc > 4))
        {
                fprintf (stderr, "Usage: %s <Server IP> <Echo Word> [<Echo Port>]\n", argv[0]); //Realizamos la validación del número de argumentos recibidos, para el correcto funcionamiento del programa
                exit(1);
        }

        servIP = argv[1];
        echoString = argv[2];

        if ((echoStringLen = strlen(echoString)) > ECHOMAX)
                DieWithError("Echo word too long"); //Validamos la longitud de la cadena recibida del ECHO

        if (argc == 4)
                echoServPort = atoi (argv[3]);
        else
                echoServPort = 7;

        if ((sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
                DieWithError("socket() failed"); //Si la validación del socket es menor a 0, encontramos este error
        memset(&echoServAddr, 0, sizeof(echoServAddr));
        echoServAddr.sin_family = AF_INET;
        echoServAddr.sin_addr.s_addr = inet_addr(servIP);
        echoServAddr.sin_port   = htons(echoServPort);

        (sendto(sock, echoString, echoStringLen, 0, (struct sockaddr *)&echoServAddr, sizeof(echoServAddr)));

        fromSize = sizeof(fromAddr);
        (respStringLen = recvfrom(sock, echoBuffer, ECHOMAX, 0, (struct sockaddr *) &fromAddr, &fromSize));

        if (echoServAddr.sin_addr.s_addr != fromAddr.sin_addr.s_addr)
        {
                fprintf(stderr,"Error: received a packet from unknow source.\n"); //Si el servidor validado es distinto al original, se envía este mensaje
                exit(1);
        }

        echoBuffer[respStringLen] = '\0';
        strcpy(buffer,echoBuffer); // Copiamos en buffer el echoBuffer
        close(sock);
        return buffer;// Devolvemos el puntero de cada posicion para que el proceso se haga automatico.
        //exit(0); // Se comenta para que no se salga aqui si no en el principal.
}

//___________________________________________________________________________________________________________________________//
void DieWithError (char *errorMessage) //Se realiza la descripción de la función "DieWithError" con el fin de imprimir los mensajes determinados
{
        printf("%s",errorMessage);
}













